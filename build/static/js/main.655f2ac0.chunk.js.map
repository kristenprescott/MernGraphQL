{"version":3,"sources":["context/auth.js","utils/InvertedPopup.js","components/MenuBar.js","components/LikeButton.js","utils/graphql.js","components/DeleteButton.js","components/PostCard.js","utils/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","pages/SinglePost.js","App.js","Providers/ApolloProvider.js","index.js"],"names":["initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","console","log","InvertedPopup","content","children","Popup","inverted","trigger","MenuBar","useContext","pathname","window","location","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","attached","tabular","pointing","secondary","size","color","Item","as","Link","to","Icon","position","username","id","onClick","active","LIKE_POST_MUTATION","gql","LikeButton","post","likes","likeCount","liked","setLiked","useEffect","find","like","refreshPage","reload","useMutation","variables","postId","likePost","likeButton","Button","basic","labelPosition","Label","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","getPosts","filter","p","writeQuery","deletePostOrMutation","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","title","body","tags","selectedFile","commentCount","createdAt","comments","Card","fluid","width","height","Content","Image","src","Header","cursor","Meta","moment","fromNow","href","textAlign","Description","extra","map","tag","className","useForm","values","setValues","onChange","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","error","Form","Field","Input","placeholder","marginBottom","graphQLErrors","message","Home","useQuery","loading","posts","Grid","columns","Row","Column","display","Transition","Group","padding","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","_","onError","err","extensions","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","register","history","push","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","match","params","commentInputFocusRef","useRef","comment","setComment","getPost","current","blur","submitComment","float","header","focus","ref","disabled","trim","border","borderTop","marginLeft","App","Container","exact","component","httpLink","createHttpLink","uri","process","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.655f2ac0.chunk.js","sourcesContent":["import React, { useReducer, createContext } from \"react\";\nimport jwtDecode from \"jwt-decode\";\n\nconst initialState = {\n  user: null,\n};\n\n// check if user is still logged in\nif (localStorage.getItem(\"jwtoken\")) {\n  // decode token:\n  const decodedToken = jwtDecode(localStorage.getItem(\"jwtoken\"));\n\n  // if expiry date is < now (expired):\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem(\"jwtoken\");\n  } else {\n    // set user to decoded token data:\n    initialState.user = decodedToken;\n  }\n}\n\nconst AuthContext = createContext({\n  user: null,\n  login: (userData) => {},\n  logout: () => {},\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case \"LOGOUT\":\n      return {\n        ...state,\n        user: null,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  function login(userData) {\n    localStorage.setItem(\"jwtoken\", userData.token);\n    dispatch({\n      type: \"LOGIN\",\n      payload: userData,\n    });\n\n    console.log(\"LOGIN:\");\n    console.log(\"token: \", userData.token);\n    console.log(\"userData: \", userData);\n  }\n\n  function logout() {\n    localStorage.removeItem(\"jwtoken\");\n    dispatch({ type: \"LOGOUT\" });\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ user: state.user, login, logout }}\n      {...props}\n    />\n  );\n}\n\nexport { AuthContext, AuthProvider };\n","import React from \"react\";\nimport { Popup } from \"semantic-ui-react\";\n\nfunction InvertedPopup({ content, children }) {\n  return <Popup inverted content={content} trigger={children} />;\n}\n\nexport default InvertedPopup;\n","import React, { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Icon, Menu } from \"semantic-ui-react\";\n\nimport { AuthContext } from \"../context/auth\";\nimport InvertedPopup from \"../utils/InvertedPopup\";\n\nfunction MenuBar() {\n  const { user, logout } = useContext(AuthContext);\n  const pathname = window.location.pathname;\n\n  const path = pathname === \"/\" ? \"home\" : pathname.substr(1);\n  const [activeItem, setActiveItem] = useState(path);\n\n  const handleItemClick = (e, { name }) => {\n    setActiveItem(name);\n  };\n\n  // return (\n  const menuBar = user ? (\n    // <>\n    <Menu attached=\"top\" tabular pointing secondary size=\"massive\" color=\"red\">\n      <InvertedPopup content=\"go to homepage\">\n        <Menu.Item as={Link} to=\"/\">\n          <Icon name=\"home\" />\n          <h6>Home</h6>\n        </Menu.Item>\n      </InvertedPopup>\n\n      <Menu.Menu position=\"right\">\n        <InvertedPopup content=\"make a new post\">\n          <Menu.Item name=\"newpost\" as={Link} to=\"/newpost\" name=\"newpost\">\n            <Icon name=\"edit\" />\n            <h6>New Post</h6>\n          </Menu.Item>\n        </InvertedPopup>\n\n        {/* TODO: link to user profile once Profile component is made */}\n        {user && (\n          <InvertedPopup content=\"go to your profile page\">\n            <Menu.Item\n              name={user.username}\n              as={Link}\n              to={`/profile/${user.id}`}\n            >\n              <Icon name=\"user\" />\n              <h6>{user.username}</h6>\n            </Menu.Item>\n          </InvertedPopup>\n        )}\n\n        <InvertedPopup content=\"logout\">\n          <Menu.Item name=\"logout\" onClick={logout}>\n            <Icon name=\"arrow alternate circle right\" />\n            <h6>Logout</h6>\n          </Menu.Item>\n        </InvertedPopup>\n      </Menu.Menu>\n    </Menu>\n  ) : (\n    <Menu attached=\"top\" tabular pointing secondary size=\"massive\" color=\"red\">\n      <InvertedPopup content=\"go to homepage\">\n        <Menu.Item\n          name=\"home\"\n          active={activeItem === \"home\"}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/\"\n        >\n          <Icon name=\"home\" />\n          <h6>Home</h6>\n        </Menu.Item>\n      </InvertedPopup>\n\n      <Menu.Menu position=\"right\">\n        <InvertedPopup content=\"\">\n          <Menu.Item\n            name=\"register\"\n            active={activeItem === \"register\"}\n            onClick={handleItemClick}\n            as={Link}\n            to=\"/register\"\n          >\n            <Icon name=\"user plus\" />\n            <h6>Register</h6>\n          </Menu.Item>\n        </InvertedPopup>\n\n        <InvertedPopup content=\"login\">\n          <Menu.Item\n            name=\"login\"\n            active={activeItem === \"login\"}\n            onClick={handleItemClick}\n            as={Link}\n            to=\"/login\"\n          >\n            <Icon name=\"user\" />\n            <h6>Login</h6>\n          </Menu.Item>\n        </InvertedPopup>\n      </Menu.Menu>\n    </Menu>\n  );\n  {\n    /* </> */\n  }\n\n  // );\n  return menuBar;\n}\n\nexport default MenuBar;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Icon, Label } from \"semantic-ui-react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nimport InvertedPopup from \"../utils/InvertedPopup\";\n\nfunction LikeButton({ user, post: { id, likes, likeCount } }) {\n  const [liked, setLiked] = useState(false);\n  useEffect(() => {\n    if (user && likes.find((like) => like.username === user.username)) {\n      setLiked(true);\n    } else {\n      setLiked(false);\n    }\n  }, [user, likes]);\n\n  // TODO: replace refresh page with fix for like/unlike instant feedback\n  const refreshPage = () => {\n    window.location.reload();\n  };\n\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\n    variables: { postId: id },\n  });\n\n  const likeButton = user ? (\n    liked ? (\n      <Button onClick={refreshPage} color=\"red\">\n        <Icon name=\"heart\" />\n      </Button>\n    ) : (\n      <Button onClick={refreshPage} color=\"red\" basic>\n        <Icon name=\"heart\" />\n      </Button>\n    )\n  ) : (\n    <Button as={Link} to=\"/login\" color=\"red\" basic>\n      <Icon name=\"heart\" />\n    </Button>\n  );\n\n  return (\n    <>\n      <InvertedPopup content={liked ? \"unlike post\" : \"like post\"}>\n        <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\n          {likeButton}\n          <Label basic color=\"red\" pointing=\"left\">\n            {likeCount}\n          </Label>\n        </Button>\n      </InvertedPopup>\n    </>\n  );\n}\n\nconst LIKE_POST_MUTATION = gql`\n  mutation likePost($postId: ID!) {\n    likePost(postId: $postId) {\n      id\n      likes {\n        id\n        username\n      }\n      likeCount\n    }\n  }\n`;\n\nexport default LikeButton;\n","import gql from \"graphql-tag\";\n\nexport const FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      id\n      username\n      title\n      body\n      tags\n      selectedFile\n      createdAt\n      likeCount\n      likes {\n        id\n        username\n        createdAt\n      }\n      commentCount\n      comments {\n        id\n        username\n        body\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const CREATE_POST_MUTATION = gql`\n  mutation createPost(\n    $title: String!\n    $body: String!\n    $tags: [String]\n    $selectedFile: String!\n  ) {\n    createPost(\n      title: $title\n      body: $body\n      tags: $tags\n      selectedFile: $selectedFile\n    ) {\n      id\n      title\n      username\n      body\n      tags\n      selectedFile\n      likeCount\n      likes {\n        id\n        username\n        createdAt\n      }\n      commentCount\n      comments {\n        id\n        username\n        body\n        createdAt\n      }\n      createdAt\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport { Button, Icon, Confirm } from \"semantic-ui-react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nimport { FETCH_POSTS_QUERY } from \"../utils/graphql\";\nimport InvertedPopup from \"../utils/InvertedPopup\";\n\nfunction DeleteButton({ postId, commentId, callback }) {\n  const [confirmOpen, setConfirmOpen] = useState(false);\n\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\n\n  const [deletePostOrMutation] = useMutation(mutation, {\n    update(proxy) {\n      setConfirmOpen(false);\n      if (!commentId) {\n        const data = proxy.readQuery({\n          query: FETCH_POSTS_QUERY,\n        });\n        data.getPosts = data.getPosts.filter((p) => p.id !== postId);\n\n        // data.getPosts = [\n        //   data.deletePost,\n        //   ...data.getPosts.filter((p) => p.id !== postId),\n        // ];\n\n        // proxy.writeQuery({\n        //   query: FETCH_POSTS_QUERY,\n        //   data: { getPosts: data.getPosts.filter((p) => p.id !== postId) },\n        // });\n        proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n        console.log(\"delete comment data: \", data); // <<----------------- TODO: debug delete comment mutation\n      }\n\n      if (callback) callback();\n    },\n    variables: {\n      postId,\n      commentId,\n    },\n  });\n\n  return (\n    <>\n      <InvertedPopup content={commentId ? \"delete comment\" : \"delete post\"}>\n        <Button\n          as=\"div\"\n          color=\"red\"\n          floated=\"right\"\n          onClick={() => {\n            setConfirmOpen(true);\n          }}\n        >\n          <Icon name=\"trash\" style={{ margin: 0 }} />\n        </Button>\n      </InvertedPopup>\n      <Confirm\n        open={confirmOpen}\n        onCancel={() => {\n          setConfirmOpen(false);\n        }}\n        onConfirm={deletePostOrMutation}\n      />\n    </>\n  );\n}\n\nconst DELETE_POST_MUTATION = gql`\n  mutation deletePost($postId: ID!) {\n    deletePost(postId: $postId)\n  }\n`;\n\nconst DELETE_COMMENT_MUTATION = gql`\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\n    deleteComment(postId: $postId, commentId: $commentId) {\n      id\n      commentCount\n      comments {\n        id\n        username\n        body\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default DeleteButton;\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Icon, Label, Image, Button } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nimport { AuthContext } from \"../context/auth\";\nimport LikeButton from \"./LikeButton\";\n// import CommentButton from './CommentButton';\nimport DeleteButton from \"./DeleteButton\";\nimport InvertedPopup from \"../utils/InvertedPopup\";\n\nfunction PostCard({\n  post: {\n    id,\n    username,\n    title,\n    body,\n    tags,\n    selectedFile,\n    likeCount,\n    likes,\n    commentCount,\n    comments,\n    createdAt,\n  },\n}) {\n  const { user } = useContext(AuthContext);\n\n  return (\n    <Card fluid style={{ width: \"100%\", height: \"100%\" }}>\n      <Card.Content>\n        {/* TODO: add more info to user popup */}\n        {/* TODO: make Profile component, link user profile here */}\n        <InvertedPopup content={username}>\n          <Image\n            floated=\"right\"\n            size=\"mini\"\n            // TODO: make user image upload functionality\n            src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n          />\n        </InvertedPopup>\n\n        <Card.Header>\n          <InvertedPopup content={`go to ${username}'s profile`}>\n            {/* TODO: link to user profile once Profile component is made */}\n            <div style={{ cursor: \"pointer\" }}>{username} </div>\n          </InvertedPopup>\n          <Card.Meta\n            as={Link}\n            to={`/posts/${id}`}\n            onClick={() => {\n              console.log(\"postId: \", `${id}`);\n            }}\n          >\n            {moment(createdAt).fromNow(true)} ago\n          </Card.Meta>\n          <br />\n          <br />\n          <hr />\n          <Card.Content>\n            <Card.Header>\n              {\" \"}\n              <h3\n                onClick={() => {\n                  window.location.href = `/posts/${id}`;\n                }}\n                style={{\n                  cursor: \"pointer\",\n                  margin: \"0 auto\",\n                  textAlign: \"center\",\n                }}\n              >\n                {title}\n              </h3>\n            </Card.Header>\n          </Card.Content>\n          <hr />\n        </Card.Header>\n\n        <Card.Description>{body}</Card.Description>\n      </Card.Content>\n      <Image src={selectedFile} />\n      <br />\n      <hr />\n\n      <Card.Content extra>\n        {tags.map((tag) => (\n          <Card.Content className=\"tags\" key={tag} as={Link} to={`/tags/${id}`}>\n            #{tag}{\" \"}\n          </Card.Content>\n        ))}\n      </Card.Content>\n\n      <Card.Content extra>\n        <LikeButton user={user} post={{ id, likes, likeCount }} />\n\n        <InvertedPopup content=\"comment on post\">\n          <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\n            <Button color=\"blue\" basic>\n              <Icon name=\"comment\" />\n            </Button>\n            <Label basic color=\"blue\" pointing=\"left\">\n              {commentCount}\n            </Label>\n          </Button>\n        </InvertedPopup>\n\n        {user && user.username === username && <DeleteButton postId={id} />}\n      </Card.Content>\n    </Card>\n  );\n}\n\nexport default PostCard;\n","import React, { useState } from \"react\";\n\nexport const useForm = (callback, initialState = {}) => {\n  const [values, setValues] = useState(initialState);\n\n  const onChange = (e) => {\n    setValues({ ...values, [e.target.name]: e.target.value });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    callback();\n  };\n\n  return {\n    onChange,\n    onSubmit,\n    values,\n  };\n};\n","import React from \"react\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nimport { useForm } from \"../utils/hooks\";\nimport { FETCH_POSTS_QUERY } from \"../utils/graphql\";\n\nfunction PostForm() {\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\n    title: \"\",\n    body: \"\",\n    tags: [],\n    selectedFile: \"\",\n  });\n\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY,\n      });\n      // console.log(\"data\", data);\n      data.getPosts = [result.data.createPost, ...data.getPosts];\n      // TODO: check out this for updating after createPost (probs around 4:06):\n      proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      // proxy.writeQuery({\n      //   query: FETCH_POSTS_QUERY,\n      //   data: {\n      //     getPosts: [result.data.createPost, ...data.getPosts],\n      //   },\n      // });\n      values.title = \"\";\n      values.body = \"\";\n      values.tags = \"\";\n      values.selectedFile = \"\";\n    },\n  });\n\n  function createPostCallback() {\n    createPost({ variables: { values } });\n  }\n\n  // if (error) {\n  //   Alert.alert(\"Error\", \"Your post cannot be empty: \" + concatErrors(error));\n  // }\n\n  return (\n    <>\n      <Form onSubmit={onSubmit}>\n        <h2>Create a Post: </h2>\n        <Form.Field>\n          <Form.Input\n            placeholder=\"title\"\n            name=\"title\"\n            onChange={onChange}\n            value={values.title}\n            error={error ? true : false}\n          />\n          <Form.Input\n            style={{ height: \"250px\" }}\n            placeholder=\"body\"\n            name=\"body\"\n            onChange={onChange}\n            value={values.body}\n            error={error ? true : false}\n          />\n          <Form.Input\n            placeholder=\"tags\"\n            name=\"tags\"\n            onChange={onChange}\n            value={values.tags}\n            error={error ? true : false}\n          />\n          <Form.Input\n            placeholder=\"selectedFile\"\n            name=\"selectedFile\"\n            onChange={onChange}\n            value={values.selectedFile}\n            error={error ? true : false}\n          />\n          <Button type=\"submit\" color=\"teal\">\n            Submit\n          </Button>\n        </Form.Field>\n      </Form>\n\n      {error && (\n        <div className=\"ui error message\" style={{ marginBottom: 20 }}>\n          <ui className=\"list\">\n            <li>{error.graphQLErrors[0].message}</li>\n          </ui>\n        </div>\n      )}\n    </>\n  );\n}\n\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost(\n    $title: String!\n    $body: String!\n    $tags: [String]\n    $selectedFile: String!\n  ) {\n    createPost(\n      title: $title\n      body: $body\n      tags: $tags\n      selectedFile: $selectedFile\n    ) {\n      id\n      title\n      username\n      body\n      tags\n      selectedFile\n      likeCount\n      likes {\n        id\n        username\n        createdAt\n      }\n      commentCount\n      comments {\n        id\n        username\n        body\n        createdAt\n      }\n      createdAt\n    }\n  }\n`;\n\nexport default PostForm;\n","import React, { useContext } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Grid, Transition } from \"semantic-ui-react\";\n\nimport { AuthContext } from \"../context/auth\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { FETCH_POSTS_QUERY } from \"../utils/graphql\";\n\nfunction Home() {\n  const { user } = useContext(AuthContext);\n  const { loading, data: { getPosts: posts } = {} } = useQuery(\n    FETCH_POSTS_QUERY\n  );\n\n  return (\n    <Grid columns={3}>\n      <Grid.Row className=\"page-title\">\n        <h1>Recent Posts</h1>\n      </Grid.Row>\n      <Grid.Row>\n        {user && (\n          <Grid.Column style={{ display: \"none\" }}>\n            <PostForm />\n          </Grid.Column>\n        )}\n        {loading ? (\n          <h1>Loading posts...</h1>\n        ) : (\n          <Transition.Group>\n            {posts &&\n              posts.map((post) => (\n                <Grid.Column key={post.id} style={{ padding: \"1rem\" }}>\n                  <PostCard post={post} />\n                </Grid.Column>\n              ))}\n          </Transition.Group>\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default Home;\n","import React, { useContext, useState } from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nimport { AuthContext } from \"../context/auth\";\nimport { useForm } from \"../utils/hooks\";\n\nfunction Login(props) {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n    username: \"\",\n    password: \"\",\n  });\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, { data: { login: userData } }) {\n      console.log(\"login user data: \", userData);\n      context.login(userData);\n      // props.history.push(\"/\");\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.errors);\n    },\n    variables: values,\n  });\n\n  function loginUserCallback() {\n    loginUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\n        <h1 className=\"form-h1\">Login</h1>\n        <Form.Input\n          label=\"Username\"\n          placeholder=\"Enter username...\"\n          name=\"username\"\n          type=\"text\"\n          value={values.username}\n          error={errors.username ? true : false}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Password\"\n          placeholder=\"Enter password...\"\n          name=\"password\"\n          type=\"password\"\n          value={values.password}\n          error={errors.password ? true : false}\n          onChange={onChange}\n        />{\" \"}\n        <div className=\"btn-wrapper login-btn-wrapper\">\n          <Button className=\"btn login-btn\" type=\"submit\" primary>\n            Login\n          </Button>\n        </div>\n      </Form>\n      {Object.keys(errors).length > 0 && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => (\n              <li key={value}>{value}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst LOGIN_USER = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      username\n      email\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Login;\n","import React, { useContext, useState } from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nimport { AuthContext } from \"../context/auth\";\nimport { useForm } from \"../utils/hooks\";\n\nfunction Register(props) {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(registerUser, {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update(_, { data: { register: userData } }) {\n      console.log(\"user registration data: \", userData);\n      // using login func. 'cause we don't need more than one func here tbh\n      context.login(userData);\n      props.history.push(\"/\");\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.errors);\n    },\n    variables: values,\n  });\n\n  function registerUser() {\n    addUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\n        <h1 className=\"form-h1\">Register</h1>\n        <Form.Input\n          label=\"Username\"\n          placeholder=\"username\"\n          name=\"username\"\n          value={values.username}\n          error={errors.username ? true : false}\n          onChange={onChange}\n          type=\"text\"\n        />\n        <Form.Input\n          label=\"Email\"\n          placeholder=\"email\"\n          name=\"email\"\n          value={values.email}\n          error={errors.email ? true : false}\n          onChange={onChange}\n          type=\"email\"\n        />{\" \"}\n        <Form.Input\n          label=\"Password\"\n          placeholder=\"password\"\n          name=\"password\"\n          value={values.password}\n          error={errors.password ? true : false}\n          onChange={onChange}\n          type=\"password\"\n        />{\" \"}\n        <Form.Input\n          label=\"Confirm Password\"\n          placeholder=\"confirm password\"\n          name=\"confirmPassword\"\n          value={values.confirmPassword}\n          error={errors.confirmPassword ? true : false}\n          onChange={onChange}\n          type=\"password\"\n        />\n        <div className=\"btn-wrapper reg-btn-wrapper\">\n          <Button className=\"btn reg-btn\" type=\"submit\" primary>\n            Submit\n          </Button>\n        </div>\n      </Form>\n      {Object.keys(errors).length > 0 && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => (\n              <li key={value}>{value}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst REGISTER_USER = gql`\n  mutation register(\n    $username: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      id\n      username\n      email\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Register;\n","import React, { useContext, useState, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport {\n  Card,\n  Grid,\n  Image,\n  Button,\n  Icon,\n  Label,\n  Form,\n} from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nimport { AuthContext } from \"../context/auth\";\nimport LikeButton from \"../components/LikeButton\";\n// TODO: make CommentButton component\n// import CommentButton from \"../components/CommentButton\";\nimport DeleteButton from \"../components/DeleteButton\";\nimport InvertedPopup from \"../utils/InvertedPopup\";\n\nfunction SinglePost(props) {\n  const postId = props.match.params.postId;\n  const { user } = useContext(AuthContext);\n  // const commentInputUnfocusRef = useRef(null);\n  // const commentInputFocusRef = useRef(null);\n  const commentInputFocusRef = useRef(null);\n\n  const [comment, setComment] = useState(\"\");\n\n  const { data: { getPost } = {} } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId,\n    },\n  });\n\n  // // https://www.davedrinks.coffee/how-do-i-use-two-react-refs/\n  // const mergeRefs = (...refs) => {\n  //   const filteredRefs = refs.filter(Boolean);\n  //   if (!filteredRefs.length) return null;\n  //   if (filteredRefs.length === 0) return filteredRefs[0];\n  //   return (inst) => {\n  //     for (const ref of filteredRefs) {\n  //       if (typeof ref === \"function\") {\n  //         ref(inst);\n  //       } else if (ref) {\n  //         ref.current = inst;\n  //       }\n  //     }\n  //   };\n  // };\n\n  // Check which element is currently focused: console.log(document.activeElement);\n\n  // TODO: fix this page refresh here too\n  const refreshPage = () => {\n    window.location.reload();\n  };\n\n  const inputBlur = () => {\n    commentInputFocusRef.current.blur();\n  };\n\n  const inputFocus = () => {\n    commentInputFocusRef.current.focus();\n  };\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment(\"\");\n      // commentInputUnfocusRef.current.blur();\n      inputBlur();\n      refreshPage();\n    },\n    variables: {\n      postId,\n      body: comment,\n    },\n  });\n\n  function deletePostCallback() {\n    window.location.href = \"/\";\n  }\n\n  let postMarkup;\n  if (!getPost) {\n    postMarkup = <p>Loading post..</p>;\n  } else {\n    const {\n      id,\n      username,\n      title,\n      body,\n      tags,\n      selectedFile,\n      likeCount,\n      likes,\n      commentCount,\n      comments,\n      createdAt,\n    } = getPost;\n\n    postMarkup = (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={3}>\n            <Image\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n              size=\"small\"\n              float=\"right\"\n            />\n          </Grid.Column>\n\n          <Grid.Column width={9}>\n            <Card fluid>\n              <Card.Content>\n                <Card.Header>\n                  {username}{\" \"}\n                  <Card.Meta>{moment(createdAt).fromNow()} ago</Card.Meta>\n                  <br />\n                  <br />\n                  <hr />\n                  <h3 style={{ margin: \"0 auto\", textAlign: \"center\" }}>\n                    <Card.Content header={title} />\n                  </h3>\n                  <hr />\n                </Card.Header>\n\n                <Card.Description>{body}</Card.Description>\n              </Card.Content>\n\n              <Image src={selectedFile} />\n\n              <Card.Content extra>\n                {tags.map((tag) => (\n                  <Card.Content\n                    className=\"tags\"\n                    key={tag}\n                    as={Link}\n                    to={`/tags/${id}`}\n                  >\n                    #{tag}{\" \"}\n                  </Card.Content>\n                ))}\n              </Card.Content>\n\n              <hr />\n\n              <Card.Content extra>\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\n\n                <InvertedPopup content=\"comment on post\">\n                  <Button\n                    as=\"div\"\n                    labelPosition=\"right\"\n                    onClick={() => {\n                      // focus on comment input\n                      inputFocus();\n\n                      console.log(\"comment on post\");\n                    }}\n                  >\n                    <Button basic color=\"blue\">\n                      <Icon name=\"comments\" />\n                    </Button>\n                    <Label basic color=\"blue\" pointing=\"left\">\n                      {commentCount}\n                    </Label>\n                  </Button>\n                </InvertedPopup>\n                {user && user.username === username && (\n                  <DeleteButton postId={id} callback={deletePostCallback} />\n                )}\n              </Card.Content>\n            </Card>\n\n            {user && (\n              <Card fluid>\n                <Card.Content>\n                  <h3>Post a comment:</h3>\n                  <Form>\n                    <div className=\"ui action input fluid\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"comment...\"\n                        name=\"comment\"\n                        value={comment}\n                        onChange={(e) => setComment(e.target.value)}\n                        // ref={commentInputUnfocusRef /*, commentInputFocusRef */}\n                        ref={commentInputFocusRef}\n                      />\n\n                      <button\n                        type=\"submit\"\n                        className=\"ui button teal\"\n                        disabled={comment.trim() === \"\"}\n                        onClick={submitComment}\n                      >\n                        Submit\n                      </button>\n                    </div>\n                  </Form>\n                </Card.Content>\n              </Card>\n            )}\n\n            <Card fluid>\n              {comments.map((comment) => (\n                <Card.Content key={comment.id}>\n                  {user && user.username === comment.username && (\n                    <DeleteButton postId={id} commentId={comment.id} />\n                  )}\n                  <Card.Header>{comment.username}</Card.Header>\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                  <Card.Description>{comment.body}</Card.Description>\n                </Card.Content>\n              ))}\n            </Card>\n          </Grid.Column>\n\n          <Grid.Column\n            width={3}\n            style={{\n              height: \"100%\",\n              border: \"1px solid gainsboro\",\n              borderTop: \"none\",\n              marginLeft: \"5%\",\n            }}\n          ></Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n\n  return postMarkup;\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: String!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      id\n      username\n      commentCount\n      comments {\n        id\n        username\n        body\n        createdAt\n      }\n      createdAt\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      username\n      title\n      body\n      tags\n      selectedFile\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        body\n        createdAt\n      }\n      createdAt\n    }\n  }\n`;\n\nexport default SinglePost;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Container } from \"semantic-ui-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n// !IMPORTANT\n// !Keep ./App.css import AFTER semantic-ui-css import\nimport \"./App.css\";\n\nimport { AuthProvider } from \"./context/auth\";\n// import { AuthRoute } from \"./utils/AuthRoute\";\n\nimport MenuBar from \"./components/MenuBar\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport PostForm from \"./components/PostForm\";\nimport SinglePost from \"./pages/SinglePost\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <div className=\"ui container\">\n            <MenuBar />\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/newpost\" component={PostForm} />\n            {/* <AuthRoute exact path=\"/login\" component={Login} /> */}\n            {/* <AuthRoute exact path=\"/register\" component={Register} /> */}\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/posts/:postId\" component={SinglePost} />\n          </div>\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport App from \"../App\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { setContext } from \"apollo-link-context\";\n\nconst serverURI = process.env.REACT_APP_SERVER_URI;\nconst httpLink = createHttpLink({\n  // ***** DONT FORGET TO CHANGE LATER *****\n  uri: `${serverURI}`,\n});\n\n// // takes a request(req) and a previous context(pre), but we don't need those params so they can be omitted\n// const authLink = setContext((req, pre) => {\nconst authLink = setContext(() => {\n  const token = localStorage.getItem(\"jwtoken\");\n  // console.log(\"authLink token: \", token);\n\n  // set jwtoken as an Authorization header\n  //    should merge the existing headers of the req w this headers object we gave\n  return {\n    headers: {\n      Authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  // cache: new InMemoryCache({}),\n  cache: new InMemoryCache(),\n});\n\nexport default (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n","import ReactDOM from \"react-dom\";\nimport ApolloProvider from \"./Providers/ApolloProvider\";\n\nReactDOM.render(ApolloProvider, document.getElementById(\"root\"));\n"],"sourceRoot":""}